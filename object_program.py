"""
面向对象编程 OOP
对象作为程序的基本单元
所有的数据类型都可以视为对象
对象是对一件事物的指代，属性是对象里面具体的描述
比如将一个人视为对象。
这个人由脑袋、四肢、身体构成。（这些就算做人这个对象的属性【描述】）
细化下，将脑袋、四肢、身体都视为对象
那脑袋又由鼻子、眼睛、耳朵、嘴巴、头发等构成，四肢、身体亦是如此（这些相当于脑袋、四肢、身体对象的属性）
而以上还可以细化，比如眼睛的具体构成、鼻子的具体构成，直到血管 -> 细胞 慢慢细化
上面是从上往下剖析人的身体构造，而人的性格、行为同样也可以根据这样从上往下划分。（行为、性格作为人的属性，细分行为、性格）
这种划分相当于从一个比较粗的粒度慢慢的转化一个细粒度。
对象就是这样构成的，定一个比较粗的粒度，然后填充里面填充自己想要表达和展示的属性然后不断的进行填充、完善
对象类似于俄罗斯套娃，一层一层。
对象是一个通用概念，上面的人这个对象可以代指世界上称之为人的所有个体，个体之间会有差异（肢体【先天、后天原因】、皮肤、身高等），但是构成是一样的
所有，对象就是找出想指代东西的大部分相同属性。
在 python 中，自定义的对象数据类型使用 class
定义对象时，往里面填充的东西需要和这个对象相关联，比如人的对象往里面填充汽车引擎，这就关联不上。
"""


# 作为学生的对象，可以考虑成绩和名字，这两个属性符合学生这个对象的描述
class Student(object):

    # 赋予 Student 对象添加 name、score 属性
    def __init__(self, name, score):
        # self 指对象本身，既然赋予对象属性，肯定需要一个东西指代本身，python 使用 self 表示
        self.name = name
        self.score = score

    # 定一个函数，输出该学生对象的信息
    def print_score(self):
        print('%s: %s' % (self.name, self.score))


# 使用 Student 对象构建一个关于 bob 的实例（具体的个体），然后调用 bob.print_score() 打印 bob 的成绩
bob = Student('Bob', 67)
# 使用 Student 对象构建一个关于 bob 的实例（具体的个体），然后调用 ana.print_score() 打印 ana 的成绩
ana = Student('Ana', 78)
bob.print_score()
ana.print_score()
